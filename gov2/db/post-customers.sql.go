// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post-customers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const completeCustomer = `-- name: CompleteCustomer :exec
update "order".customers
set completed = true,
    completedat = now()
where id = $1
`

func (q *Queries) CompleteCustomer(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, completeCustomer, id)
	return err
}

const insertCustomer = `-- name: InsertCustomer :one
insert into "order".customers (
    name,
    phone,
    email,
    orderin,
    orderdue,
    rushed,
    form,
    description
) values (
    $1,
    $2, 
    $3, 
    $4, 
    $5, 
    $6, 
    $7, 
    $8
) returning id
`

type InsertCustomerParams struct {
	Name        pgtype.Text
	Phone       pgtype.Text
	Email       pgtype.Text
	Orderin     pgtype.Date
	Orderdue    pgtype.Date
	Rushed      pgtype.Bool
	Form        pgtype.Text
	Description pgtype.Text
}

func (q *Queries) InsertCustomer(ctx context.Context, arg InsertCustomerParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertCustomer,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Orderin,
		arg.Orderdue,
		arg.Rushed,
		arg.Form,
		arg.Description,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const removeCustomer = `-- name: RemoveCustomer :exec
update "order".customers
set removed = true
where id = $1
`

func (q *Queries) RemoveCustomer(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, removeCustomer, id)
	return err
}

const restoreCustomer = `-- name: RestoreCustomer :exec
update "order".customers
set removed = false,
completed = false
where id = $1
`

func (q *Queries) RestoreCustomer(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, restoreCustomer, id)
	return err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE "order".customers
SET name = $1,
    phone = $2,
    email = $3,
    orderin = $4,
    orderdue = $5,
    rushed = $6,
    form = $7,
    description = $8
WHERE id = $9
RETURNING id
`

type UpdateCustomerParams struct {
	Name        pgtype.Text
	Phone       pgtype.Text
	Email       pgtype.Text
	Orderin     pgtype.Date
	Orderdue    pgtype.Date
	Rushed      pgtype.Bool
	Type        pgtype.Text
	Description pgtype.Text
	ID          pgtype.UUID
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Orderin,
		arg.Orderdue,
		arg.Rushed,
		arg.Type,
		arg.Description,
		arg.ID,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
